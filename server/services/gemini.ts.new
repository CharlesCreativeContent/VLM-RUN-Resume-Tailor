import { GoogleGenerativeAI } from '@google/generative-ai';
import { ResumeData } from '@shared/schema';

/**
 * Tailor a resume to a job posting using Gemini API
 * @param resume Original resume data
 * @param jobDetails Job posting details
 * @param apiKey Gemini API key
 * @returns Tailored resume data
 */
export async function tailorResume(
  resume: ResumeData,
  jobDetails: string,
  apiKey: string
): Promise<ResumeData> {
  try {
    // Initialize Gemini client
    const genAI = new GoogleGenerativeAI(apiKey);
    // Use the appropriate model name for the current Gemini API version
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

    // Prepare the prompt
    const prompt = `
    I need you to tailor a resume for a job application.

    Here's the original resume data in JSON format:
    ${JSON.stringify(resume, null, 2)}

    And here are the job details:
    ${jobDetails}

    Please analyze the job posting and tailor the resume to highlight relevant skills and experiences.
    Return a modified JSON with the same structure as the original resume.
    Emphasize skills and experiences that match the job requirements.
    Modify work experience descriptions to emphasize relevant responsibilities.
    Keep the same JSON schema/structure but modify the content to be more relevant to the job.
    IMPORTANT: Don't modify the contact information at all, keep it exactly the same.
    Return ONLY the JSON data in a format that can be parsed by JSON.parse(), without any explanations, comments, or markdown formatting.
    `;

    // Generate response from Gemini
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const responseText = response.text();
    
    // Parse response text to get tailored resume
    return parseTailoredResume(responseText, resume);
  } catch (error) {
    console.error("Error tailoring resume with Gemini:", error);
    throw new Error(`Failed to tailor resume: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * Parse Gemini response to extract tailored resume JSON
 * @param responseText Response text from Gemini
 * @param originalResume Original resume data as fallback
 * @returns Tailored resume data
 */
function parseTailoredResume(responseText: string, originalResume: ResumeData): ResumeData {
  try {
    // Log the raw response for debugging
    console.log("Raw Gemini response:", responseText.substring(0, 500) + "...");
    
    // Extract JSON from response text
    let jsonText = extractJsonFromText(responseText);
    
    // Clean the JSON text
    const cleanJsonText = cleanJsonString(jsonText);
    
    // Log the cleaned JSON text for debugging
    console.log("Cleaned JSON text:", cleanJsonText.substring(0, 200) + "...");
    
    try {
      // Try to parse the cleaned JSON directly
      const tailoredResume = JSON.parse(cleanJsonText) as ResumeData;
      console.log("Successfully parsed the JSON");
      return processResumeData(tailoredResume, originalResume);
    } catch (parseError) {
      console.error("First parsing attempt failed:", parseError);
      
      try {
        // If direct parsing fails, try a more aggressive approach to fix the JSON
        const fixedJson = fixJsonString(cleanJsonText);
        console.log("Fixed JSON:", fixedJson.substring(0, 200) + "...");
        
        const tailoredResume = JSON.parse(fixedJson) as ResumeData;
        console.log("Successfully parsed the fixed JSON");
        return processResumeData(tailoredResume, originalResume);
      } catch (secondError) {
        console.error("Second parsing attempt failed:", secondError);
        // If all parsing attempts fail, use the original resume as fallback
        return originalResume;
      }
    }
  } catch (error) {
    console.error("Error parsing Gemini response:", error);
    console.log("Using original resume as fallback");
    return originalResume;
  }
}

/**
 * Extract JSON from text that might contain markdown or other formatting
 */
function extractJsonFromText(text: string): string {
  // Try to extract JSON from code blocks
  const codeBlockRegex = /```(?:json)?\s*([\s\S]*?)\s*```/g;
  const inlineCodeRegex = /`([\s\S]*?)`/g;
  
  let codeBlockMatches = codeBlockRegex.exec(text);
  while (codeBlockMatches !== null) {
    const potentialJson = codeBlockMatches[1].trim();
    if (potentialJson.startsWith('{') && potentialJson.endsWith('}')) {
      return potentialJson;
    }
    codeBlockMatches = codeBlockRegex.exec(text);
  }
  
  let inlineCodeMatches = inlineCodeRegex.exec(text);
  while (inlineCodeMatches !== null) {
    const potentialJson = inlineCodeMatches[1].trim();
    if (potentialJson.startsWith('{') && potentialJson.endsWith('}')) {
      return potentialJson;
    }
    inlineCodeMatches = inlineCodeRegex.exec(text);
  }
  
  // If no valid JSON found in code blocks, try to extract it directly
  const directJsonMatch = text.match(/\{[\s\S]*\}/);
  if (directJsonMatch) {
    return directJsonMatch[0];
  }
  
  throw new Error("Could not locate valid JSON in the response");
}

/**
 * Clean JSON string to fix common issues
 */
function cleanJsonString(jsonString: string): string {
  return jsonString
    .replace(/,\s*]/g, "]")                  // Remove trailing commas in arrays
    .replace(/,\s*}/g, "}")                  // Remove trailing commas in objects
    .replace(/(['"])?([a-zA-Z0-9_]+)(['"])?\s*:/g, '"$2":') // Ensure property names are properly quoted
    .replace(/:\s*'([^']*)'/g, ':"$1"')      // Replace single quotes with double quotes for values
    .replace(/\\/g, "\\\\")                  // Escape backslashes
    .replace(/\\"/g, '\\\\"')                // Handle nested quotes
    .replace(/\n/g, " ")                     // Replace newlines with spaces
    .replace(/\r/g, "")                      // Remove carriage returns
    .replace(/\t/g, " ")                     // Replace tabs with spaces
    .replace(/\\n/g, " ")                    // Replace escaped newlines with spaces
    .replace(/\s{2,}/g, " ")                 // Replace multiple spaces with a single space
    .replace(/,\s*,/g, ",")                  // Remove consecutive commas
    .replace(/\[\s*,/g, "[")                 // Fix arrays starting with comma
    .replace(/,\s*\]/g, "]");                // Fix arrays ending with comma
}

/**
 * Fix JSON string by adding missing brackets and braces
 */
function fixJsonString(jsonString: string): string {
  // Try to fix missing/extra brackets
  let fixed = jsonString;
  const openBraces = (fixed.match(/\{/g) || []).length;
  const closeBraces = (fixed.match(/\}/g) || []).length;
  const openBrackets = (fixed.match(/\[/g) || []).length;
  const closeBrackets = (fixed.match(/\]/g) || []).length;
  
  // Add missing closing braces
  if (openBraces > closeBraces) {
    fixed = fixed + "}".repeat(openBraces - closeBraces);
  }
  
  // Add missing closing brackets
  if (openBrackets > closeBrackets) {
    fixed = fixed + "]".repeat(openBrackets - closeBrackets);
  }
  
  return fixed;
}

/**
 * Process parsed resume data to ensure all required fields exist
 */
function processResumeData(tailoredResume: ResumeData, originalResume: ResumeData): ResumeData {
  // Create a complete resume with all required fields
  const completeResume: ResumeData = {
    contact: {
      name: "",
      location: "",
      email: "",
      phone: "",
      linkedin: "",
      github: ""
    },
    summary: "",
    experience: [],
    education: [],
    skills: {
      languages: [],
      frameworks: [],
      tools: [],
      concepts: []
    },
    projects: []
  };
  
  // Use the original contact information as requested
  completeResume.contact = originalResume.contact;
  
  // For other fields, use the tailored data if available, otherwise use original
  completeResume.summary = tailoredResume.summary || originalResume.summary;
  
  // Handle experience
  if (Array.isArray(tailoredResume.experience) && tailoredResume.experience.length > 0) {
    completeResume.experience = tailoredResume.experience.map(exp => ({
      title: exp.title || "",
      company: exp.company || "",
      location: exp.location || "",
      startDate: exp.startDate || "",
      endDate: exp.endDate || "",
      responsibilities: Array.isArray(exp.responsibilities) ? exp.responsibilities : []
    }));
  } else {
    completeResume.experience = originalResume.experience;
  }
  
  // Handle education
  if (Array.isArray(tailoredResume.education) && tailoredResume.education.length > 0) {
    completeResume.education = tailoredResume.education.map(edu => ({
      degree: edu.degree || "",
      institution: edu.institution || "",
      years: edu.years || "",
      gpa: edu.gpa || ""
    }));
  } else {
    completeResume.education = originalResume.education;
  }
  
  // Handle skills
  if (tailoredResume.skills) {
    completeResume.skills = {
      languages: Array.isArray(tailoredResume.skills.languages) ? tailoredResume.skills.languages : originalResume.skills.languages,
      frameworks: Array.isArray(tailoredResume.skills.frameworks) ? tailoredResume.skills.frameworks : originalResume.skills.frameworks,
      tools: Array.isArray(tailoredResume.skills.tools) ? tailoredResume.skills.tools : originalResume.skills.tools,
      concepts: Array.isArray(tailoredResume.skills.concepts) ? tailoredResume.skills.concepts : originalResume.skills.concepts
    };
  } else {
    completeResume.skills = originalResume.skills;
  }
  
  // Handle projects
  if (Array.isArray(tailoredResume.projects) && tailoredResume.projects.length > 0) {
    completeResume.projects = tailoredResume.projects.map(proj => ({
      name: proj.name || "",
      description: Array.isArray(proj.description) ? proj.description : []
    }));
  } else {
    completeResume.projects = originalResume.projects;
  }
  
  return completeResume;
}